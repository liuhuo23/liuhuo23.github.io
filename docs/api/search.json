[{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"go_chan","date":"2024-12-22T12:13:07.448Z","categories_index":"","tags_index":"","author_index":"liuhuo"},{"id":"6904b6e2cd4631c9cbc3edadb24f9469","title":"rust安装","content":"Rust 安装","slug":"rust安装","date":"2024-12-17T13:38:28.000Z","categories_index":"rust","tags_index":"rust,安装","author_index":"liuhuo"},{"id":"0aecaa233b1916984a65c4a9a27b4910","title":"rust DNS 查询实现","content":"代码use std::net::&#123;Ipv4Addr, UdpSocket&#125;;use std::time::Duration;// DNS 响应码enum ResponseCode &#123;    NoError = 0,    FormatError = 1,    ServerFailure = 2,    NameEroor = 3,    NotImplemented = 4,    Refused = 5,&#125;// 创建随机查询 IDfn random_id() -&gt; u16 &#123;    use std::time::&#123;SystemTime, UNIX_EPOCH&#125;;    let now = SystemTime::now().duration_since(UNIX_EPOCH).unwrap();    (now.as_secs() as u16) ^ (now.subsec_nanos() as u16)&#125;// 构建DNS查询包fn build_query(domain: &amp;str, id: u16) -&gt; Vec&lt;u8&gt; &#123;    let mut query = Vec::new();    // 头部    query.extend_from_slice(&amp;id.to_be_bytes()); // ID    query.extend_from_slice(&amp;[0x01, 0x00]); // 标志：标准查询，递归期望    query.extend_from_slice(&amp;[0x00, 0x01]); // 问题数量：1    query.extend_from_slice(&amp;[0x00, 0x00]); // 回答数量：0    query.extend_from_slice(&amp;[0x00, 0x00]); // 权威回答数量：0    query.extend_from_slice(&amp;[0x00, 0x00]); // 附加记录数量：0    // 问题部分 - 域名    for part in domain.split(&#x27;.&#x27;) &#123;        query.push(part.len() as u8);        query.extend_from_slice(part.as_bytes());    &#125;    query.push(0x00); // 域名结束标记    // 问题部分 - 查询类型和类    query.extend_from_slice(&amp;[0x00, 0x01]); // 类型：A记录    query.extend_from_slice(&amp;[0x00, 0x01]); // 类：IN (Internet)    query&#125;// 解析DNS响应fn parse_response(response: &amp;[u8], expected_id: u16) -&gt; Result&lt;Vec&lt;Ipv4Addr&gt;, String&gt; &#123;    if response.len() &lt; 12 &#123;        return Err(&quot;响应太短&quot;.to_string());    &#125;    // 解析ID    let id = u16::from_be_bytes([response[0], response[1]]);    if id != expected_id &#123;        return Err(format!(&quot;ID不匹配：期望 &#123;&#125;, 收到 &#123;&#125;&quot;, expected_id, id));    &#125;    // 解析标志    let flags = u16::from_be_bytes([response[2], response[3]]);    let qr = (flags &gt;&gt; 15) &amp; 0x1; // 响应位    let opcode = (flags &gt;&gt; 11) &amp; 0xF; // 操作码    let rcode = flags &amp; 0xF; // 响应码    if qr != 1 &#123;        return Err(&quot;不是响应包&quot;.to_string());    &#125;    if opcode != 0 &#123;        return Err(format!(&quot;未知操作码: &#123;&#125;&quot;, opcode));    &#125;    match rcode &#123;        0 =&gt; &#123;&#125; // 没有错误        1 =&gt; return Err(&quot;DNS格式错误&quot;.to_string()),        2 =&gt; return Err(&quot;DNS服务器失败&quot;.to_string()),        3 =&gt; return Err(&quot;域名不存在&quot;.to_string()),        4 =&gt; return Err(&quot;DNS服务器不支持请求类型&quot;.to_string()),        5 =&gt; return Err(&quot;DNS查询被拒绝&quot;.to_string()),        _ =&gt; return Err(format!(&quot;未知DNS错误码: &#123;&#125;&quot;, rcode)),    &#125;    // 获取问题和回答数量    let qdcount = u16::from_be_bytes([response[4], response[5]]);    let ancount = u16::from_be_bytes([response[6], response[7]]);    if ancount == 0 &#123;        return Err(&quot;没有找到任何答案&quot;.to_string());    &#125;    // 跳过问题部分    let mut pos = 12;    for _ in 0..qdcount &#123;        // 跳过域名        while pos &lt; response.len() &#123;            let len = response[pos] as usize;            if len == 0 &#123;                pos += 1;                break;            &#125;            // 检查是否是压缩指针            if (len &amp; 0xC0) == 0xC0 &#123;                pos += 2;                break;            &#125;            pos += len + 1;        &#125;        // 跳过类型和类        pos += 4;    &#125;    // 解析回答部分    let mut ips = Vec::new();    for _ in 0..ancount &#123;        // 跳过域名（可能是压缩指针）        if (response[pos] &amp; 0xC0) == 0xC0 &#123;            pos += 2;        &#125; else &#123;            while pos &lt; response.len() &#123;                let len = response[pos] as usize;                if len == 0 &#123;                    pos += 1;                    break;                &#125;                pos += len + 1;            &#125;        &#125;        // 读取记录类型        if pos + 10 &gt; response.len() &#123;            return Err(&quot;响应数据不完整&quot;.to_string());        &#125;        let rec_type = u16::from_be_bytes([response[pos], response[pos + 1]]);        let data_len = u16::from_be_bytes([response[pos + 8], response[pos + 9]]) as usize;        pos += 10;        // 检查是否是A记录        if rec_type == 1 &amp;&amp; data_len == 4 &amp;&amp; pos + 4 &lt;= response.len() &#123;            let ip = Ipv4Addr::new(                response[pos],                response[pos + 1],                response[pos + 2],                response[pos + 3],            );            ips.push(ip);        &#125;        pos += data_len;    &#125;    if ips.is_empty() &#123;        Err(&quot;未找到IPv4地址&quot;.to_string())    &#125; else &#123;        Ok(ips)    &#125;&#125;pub fn resolve_domain(domain: &amp;str) -&gt; Result&lt;Vec&lt;Ipv4Addr&gt;, String&gt; &#123;    // 创建UDP套接字    let socket = match UdpSocket::bind(&quot;0.0.0.0:0&quot;) &#123;        Ok(s) =&gt; s,        Err(e) =&gt; return Err(format!(&quot;绑定套接字失败: &#123;&#125;&quot;, e)),    &#125;;    // 设置超时    if let Err(e) = socket.set_read_timeout(Some(Duration::from_secs(5))) &#123;        return Err(format!(&quot;设置超时失败: &#123;&#125;&quot;, e));    &#125;    // 连接到DNS服务器    if let Err(e) = socket.connect(&quot;8.8.8.8:53&quot;) &#123;        return Err(format!(&quot;连接DNS服务器失败: &#123;&#125;&quot;, e));    &#125;    // 生成随机ID    let query_id = random_id();    // 构建DNS查询    let query = build_query(domain, query_id);    // 发送查询    if let Err(e) = socket.send(&amp;query) &#123;        return Err(format!(&quot;发送查询失败: &#123;&#125;&quot;, e));    &#125;    // 接收响应    let mut buf = [0u8; 512];    let size = match socket.recv(&amp;mut buf) &#123;        Ok(n) =&gt; n,        Err(e) =&gt; return Err(format!(&quot;接收响应失败: &#123;&#125;&quot;, e)),    &#125;;    // 解析响应    parse_response(&amp;buf[0..size], query_id)&#125;#[cfg(test)]mod tests &#123;    use super::*;    #[test]    fn test_reslove_domain() &#123;        println!(&quot;baidu.com:&#123;:#?&#125;&quot;, resolve_domain(&quot;baidu.com&quot;).unwrap());        println!(            &quot;fengliuhuo.top: &#123;:#?&#125;&quot;,            resolve_domain(&quot;barn.fengliuhuo.top&quot;).unwrap()        );        println!(&quot;myhome.org: &#123;:#?&#125;&quot;, resolve_domain(&quot;myhome.org&quot;).unwrap());        println!(            &quot;fengliuhuo.top: &#123;:#?&#125;&quot;,            resolve_domain(&quot;fengliuhuo.top&quot;).unwrap()        );    &#125;&#125;","slug":"DNS查询","date":"2024-12-17T13:38:28.000Z","categories_index":"rust","tags_index":"DNS,rust","author_index":"liuhuo"},{"id":"d723e70f8e4e44340d60bd293f961327","title":"python 安装","content":"Python如何安装一个python\n","slug":"python","date":"2024-12-17T12:47:39.000Z","categories_index":"Python","tags_index":"安装","author_index":"liuhuo"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2024-12-16T16:58:34.212Z","categories_index":"","tags_index":"","author_index":"liuhuo"}]