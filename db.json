{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/886a749e.css","path":"static/886a749e.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/dccf965f.jpg","path":"static/img/dccf965f.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/120aa8f8.js","path":"static/js/120aa8f8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/22ac7e7f.js","path":"static/js/22ac7e7f.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/36429e9b.js","path":"static/js/36429e9b.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/415fa29b.js","path":"static/js/415fa29b.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/53ed1a6f.js","path":"static/js/53ed1a6f.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/7d897144.js","path":"static/js/7d897144.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/7e80f274.js","path":"static/js/7e80f274.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/8da07a12.js","path":"static/js/8da07a12.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/9aa0d897.js","path":"static/js/9aa0d897.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/9cb479b5.js","path":"static/js/9cb479b5.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/a92e6a1c.js","path":"static/js/a92e6a1c.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/c562793b.js","path":"static/js/c562793b.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/d57a5994.js","path":"static/js/d57a5994.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/ff251d5d.js","path":"static/js/ff251d5d.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/fffbee97.js","path":"static/js/fffbee97.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/3e25f349.css","path":"static/css/3e25f349.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/6b275704.css","path":"static/css/6b275704.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/882f9706.css","path":"static/css/882f9706.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/8e0e69c4.css","path":"static/css/8e0e69c4.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/9a0271b0.css","path":"static/css/9a0271b0.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/a14e1a22.css","path":"static/css/a14e1a22.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/go_chan.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734869594286},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1734368314212},{"_id":"source/_posts/DNS查询.md","hash":"c71245abc1f47cc69b901f429ae9e5e57e2e2252","modified":1743340770886},{"_id":"source/_posts/python.md","hash":"6c99cd6d8aadcaa39d5a595e2635dc65e1b381a9","modified":1734441953869},{"_id":"source/_posts/rust安装.md","hash":"f83421dbf756b2e58dca5799555d9137d0aef7c8","modified":1734714245049},{"_id":"source/go/index.md","hash":"3d6624dc526298ddee5ebf65262839eb00969426","modified":1734869962489},{"_id":"source/about/index.md","hash":"d73eb8d5d475d6524f4bc03d80945094722b9394","modified":1734869883865},{"_id":"source/rust/index.md","hash":"9dec3ad76929825ffc29aced7976c22631c45374","modified":1734869878172},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"953a91ce5eb62368e3fe1d335e8ccd024983b4fb","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"c5825d6aed607fd4c5d85d261aed39e2d9d59c81","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"8b5aea1bd91a6428040ec154ef313d20129fd1ce","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/22ac7e7f.js","hash":"cdc1e66e812e4ce762170e6c2008a89ddb50ac22","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/img/dccf965f.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/886a749e.css","hash":"46ef385b52d11142f603d0916042be66e4e04b46","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/36429e9b.js","hash":"f1eb144273d1914ffd000cd6ab8ebf4603566fa1","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/415fa29b.js","hash":"8bbf6514805e9634eeb37d58ab9476fe7b4acab9","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/53ed1a6f.js","hash":"392525c36d6f623723427c09a42cc7178f0aa65c","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/7d897144.js","hash":"bc14613b9e836e8802949241e443176c3923a4ae","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/7e80f274.js","hash":"3e055cf0e8e1e795571b0ac307ebd9d055874bd9","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/9aa0d897.js","hash":"da073d8793e58e2bd92cd879d753966950ea6d7e","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/8da07a12.js","hash":"bbf25dc2749fc8ec6cd379e69a27d5e5ee116da1","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/9cb479b5.js","hash":"41d6681d53d8ca77f4df159d831237550a80939c","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/a92e6a1c.js","hash":"15838a598d2c67734d4e28d6667a148e3315862f","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/c562793b.js","hash":"ef13be62aaee32758e059e625e6b85504c53f822","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/d57a5994.js","hash":"baeabc2ef1f3ed1b2f651a436032cedc42e16d78","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/ff251d5d.js","hash":"21fe31757fa0993c2a3d34009b8fa19e421e4dfb","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/css/3e25f349.css","hash":"2859941dbaabcdf25bfb6379a0efaf6b02b45971","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/css/6b275704.css","hash":"b04a2cd1a356e16cded5392bad271ce2f5b1c455","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/fffbee97.js","hash":"6a539112698cb0925ea4da8af22f3e8cdc554e3f","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/css/882f9706.css","hash":"156eb90b06b5f6f6f0bf24973874ecd85906f8fd","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/css/8e0e69c4.css","hash":"5e2ac4baf9923ea59d1dbddccb44a0e4ffbdc87f","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/css/9a0271b0.css","hash":"140052b8339ae6633bfdb6544050ba97c72ee630","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/css/a14e1a22.css","hash":"d4f364239f1c63b66b9917062e6a7cd9fa26fcba","modified":1734368431086},{"_id":"node_modules/hexo-theme-aurora/source/static/js/120aa8f8.js","hash":"84afbda7eecf891fae3fdac5219582c322d903ee","modified":1734368431086},{"_id":"public/api/posts/1.json","hash":"eb174a683bb943f38a5b95fe80a35d80d407451f","modified":1743341417306},{"_id":"public/api/archives/1.json","hash":"eb174a683bb943f38a5b95fe80a35d80d407451f","modified":1743341417306},{"_id":"public/api/articles/go_chan.json","hash":"5d44ce2eabb3f630f00498c2e901d6ab1eb70610","modified":1743341417306},{"_id":"public/api/articles/rust安装.json","hash":"15fe444041dff8e91ec579f1288ce1c9fbdceffb","modified":1743341417306},{"_id":"public/api/articles/DNS查询.json","hash":"f8c11f4bf304b4b397f6e65832a1e70640f01ca1","modified":1743340972792},{"_id":"public/api/articles/python.json","hash":"a7c1658e11e47539142238a6ed3b48d67709cc35","modified":1743341417306},{"_id":"public/api/articles/hello-world.json","hash":"2681404ab3dd99a441b9bef9b845d453f25720d6","modified":1743341417306},{"_id":"public/api/features.json","hash":"f8d305c316f5e744da10cb45f8d29ef8c15b8487","modified":1743341417306},{"_id":"public/api/authors/blog-author.json","hash":"8286963c4df0becb731a048cf60a810615a21968","modified":1743341417306},{"_id":"public/api/categories.json","hash":"4a9e9191166703b01e170e02b9b99b2de26cec0d","modified":1743341417306},{"_id":"public/api/categories/rust.json","hash":"7234bec299ba9c532ec0ed664701fcae9db2cbeb","modified":1743341417306},{"_id":"public/api/categories/Python.json","hash":"40a8b0d9e0cac361050cadb3d6c86f0eadacf2ba","modified":1743341417306},{"_id":"public/api/tags.json","hash":"4ecbce3f9748739c87d74d1c7c9d6d4d795dee0f","modified":1743341417306},{"_id":"public/api/tags/DNS.json","hash":"fc5441e79a4cf11ca95ef2d455d06b971b318ed4","modified":1743340972792},{"_id":"public/api/tags/rust.json","hash":"7234bec299ba9c532ec0ed664701fcae9db2cbeb","modified":1743341417306},{"_id":"public/api/tags/安装.json","hash":"5bde8139234bbf516933d97964c6ae7e17eb2e1e","modified":1743341417306},{"_id":"public/api/pages/go/index.json","hash":"d4082ab732ac50ecf4e0e5c87abae20a14bc4a2f","modified":1743340972792},{"_id":"public/api/pages/about/index.json","hash":"bef1a361618497af2e126fcfe740d21b66b8fa62","modified":1743340972792},{"_id":"public/api/pages/rust/index.json","hash":"76fd01160e3a0e4c8479b947a662429749cb7c52","modified":1743340972792},{"_id":"public/api/statistic.json","hash":"c22f5abbc24dd21a62071d00f2524c7a96c2a1bc","modified":1743341417306},{"_id":"public/api/search.json","hash":"6077725475aab78a8def2aad6d31191794e9f486","modified":1743341417306},{"_id":"public/api/site.json","hash":"c6cb63c056de9609adc151477fbad04a7773e368","modified":1743341417306},{"_id":"public/post/go_chan.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/post/DNS查询.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/post/rust安装.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/post/python.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/post/hello-world.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/tags/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/archives/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/page/go/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/page/about/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/page/rust/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/tags/search/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743340972792},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1743340972792},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1743340972792},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1743340972792},{"_id":"public/static/img/dccf965f.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1743340972792},{"_id":"public/static/js/22ac7e7f.js","hash":"cdc1e66e812e4ce762170e6c2008a89ddb50ac22","modified":1743340972792},{"_id":"public/static/886a749e.css","hash":"46ef385b52d11142f603d0916042be66e4e04b46","modified":1743340972792},{"_id":"public/static/js/415fa29b.js","hash":"8bbf6514805e9634eeb37d58ab9476fe7b4acab9","modified":1743340972792},{"_id":"public/static/js/53ed1a6f.js","hash":"392525c36d6f623723427c09a42cc7178f0aa65c","modified":1743340972792},{"_id":"public/static/js/7d897144.js","hash":"bc14613b9e836e8802949241e443176c3923a4ae","modified":1743340972792},{"_id":"public/static/js/36429e9b.js","hash":"f1eb144273d1914ffd000cd6ab8ebf4603566fa1","modified":1743340972792},{"_id":"public/static/js/7e80f274.js","hash":"3e055cf0e8e1e795571b0ac307ebd9d055874bd9","modified":1743340972792},{"_id":"public/static/js/9cb479b5.js","hash":"41d6681d53d8ca77f4df159d831237550a80939c","modified":1743340972792},{"_id":"public/static/js/a92e6a1c.js","hash":"15838a598d2c67734d4e28d6667a148e3315862f","modified":1743340972792},{"_id":"public/static/js/8da07a12.js","hash":"bbf25dc2749fc8ec6cd379e69a27d5e5ee116da1","modified":1743340972792},{"_id":"public/static/js/c562793b.js","hash":"ef13be62aaee32758e059e625e6b85504c53f822","modified":1743340972792},{"_id":"public/static/js/9aa0d897.js","hash":"da073d8793e58e2bd92cd879d753966950ea6d7e","modified":1743340972792},{"_id":"public/static/js/d57a5994.js","hash":"baeabc2ef1f3ed1b2f651a436032cedc42e16d78","modified":1743340972792},{"_id":"public/static/js/ff251d5d.js","hash":"21fe31757fa0993c2a3d34009b8fa19e421e4dfb","modified":1743340972792},{"_id":"public/static/js/fffbee97.js","hash":"6a539112698cb0925ea4da8af22f3e8cdc554e3f","modified":1743340972792},{"_id":"public/static/css/3e25f349.css","hash":"2859941dbaabcdf25bfb6379a0efaf6b02b45971","modified":1743340972792},{"_id":"public/static/css/6b275704.css","hash":"b04a2cd1a356e16cded5392bad271ce2f5b1c455","modified":1743340972792},{"_id":"public/static/css/882f9706.css","hash":"156eb90b06b5f6f6f0bf24973874ecd85906f8fd","modified":1743340972792},{"_id":"public/static/css/8e0e69c4.css","hash":"5e2ac4baf9923ea59d1dbddccb44a0e4ffbdc87f","modified":1743340972792},{"_id":"public/static/css/9a0271b0.css","hash":"140052b8339ae6633bfdb6544050ba97c72ee630","modified":1743340972792},{"_id":"public/static/js/120aa8f8.js","hash":"84afbda7eecf891fae3fdac5219582c322d903ee","modified":1743340972792},{"_id":"public/static/css/a14e1a22.css","hash":"d4f364239f1c63b66b9917062e6a7cd9fa26fcba","modified":1743340972792},{"_id":"source/rust/DNS查询.md","hash":"c71245abc1f47cc69b901f429ae9e5e57e2e2252","modified":1743341143711},{"_id":"public/api/pages/rust/DNS查询.json","hash":"f8839966c4e01e7fabb9363c345e060cc1017aa0","modified":1743341417306},{"_id":"public/page/rust/DNS查询.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1743341417306}],"Category":[{"name":"rust","_id":"cm8vo7brt00042zxrcx7l1d7w"},{"name":"Python","_id":"cm8vo7brv000a2zxr9dee9pb4"}],"Data":[],"Page":[{"title":"go","date":"2024-12-16T17:06:06.000Z","_content":"","source":"go/index.md","raw":"---\ntitle: go\ndate: 2024-12-17 01:06:06\n---","updated":"2024-12-22T12:19:22.489Z","path":"go/index.html","comments":1,"layout":"page","_id":"cm8vo7brq00002zxr98y8h0tl","content":"","excerpt":"","more":""},{"title":"about","date":"2024-12-16T17:06:06.000Z","_content":"这是一个关于页\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-12-17 01:06:06\n---\n这是一个关于页\n","updated":"2024-12-22T12:18:03.865Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm8vo7brs00022zxr5t1gdbux","content":"<p>这是一个关于页</p>\n","excerpt":"","more":"<p>这是一个关于页</p>\n"},{"title":"rust","date":"2024-12-17T13:26:53.000Z","_content":"\n\n\n\n\nrust\n","source":"rust/index.md","raw":"---\ntitle: rust\ndate: 2024-12-17 21:26:53\n---\n\n\n\n\n\nrust\n","updated":"2024-12-22T12:17:58.172Z","path":"rust/index.html","comments":1,"layout":"page","_id":"cm8vo7bru00062zxr7n3caxdo","content":"<p>rust</p>\n","excerpt":"","more":"<p>rust</p>\n"},{"title":"rust DNS 查询实现","date":"2024-12-17T13:38:28.000Z","categories":["rust"],"tags":["DNS","rust"],"_content":"\n# 代码\n```rust\nuse std::net::{Ipv4Addr, UdpSocket};\nuse std::time::Duration;\n\n// DNS 响应码\nenum ResponseCode {\n    NoError = 0,\n    FormatError = 1,\n    ServerFailure = 2,\n    NameEroor = 3,\n    NotImplemented = 4,\n    Refused = 5,\n}\n\n// 创建随机查询 ID\nfn random_id() -> u16 {\n    use std::time::{SystemTime, UNIX_EPOCH};\n    let now = SystemTime::now().duration_since(UNIX_EPOCH).unwrap();\n    (now.as_secs() as u16) ^ (now.subsec_nanos() as u16)\n}\n\n// 构建DNS查询包\nfn build_query(domain: &str, id: u16) -> Vec<u8> {\n    let mut query = Vec::new();\n\n    // 头部\n    query.extend_from_slice(&id.to_be_bytes()); // ID\n    query.extend_from_slice(&[0x01, 0x00]); // 标志：标准查询，递归期望\n    query.extend_from_slice(&[0x00, 0x01]); // 问题数量：1\n    query.extend_from_slice(&[0x00, 0x00]); // 回答数量：0\n    query.extend_from_slice(&[0x00, 0x00]); // 权威回答数量：0\n    query.extend_from_slice(&[0x00, 0x00]); // 附加记录数量：0\n\n    // 问题部分 - 域名\n    for part in domain.split('.') {\n        query.push(part.len() as u8);\n        query.extend_from_slice(part.as_bytes());\n    }\n    query.push(0x00); // 域名结束标记\n\n    // 问题部分 - 查询类型和类\n    query.extend_from_slice(&[0x00, 0x01]); // 类型：A记录\n    query.extend_from_slice(&[0x00, 0x01]); // 类：IN (Internet)\n\n    query\n}\n\n// 解析DNS响应\nfn parse_response(response: &[u8], expected_id: u16) -> Result<Vec<Ipv4Addr>, String> {\n    if response.len() < 12 {\n        return Err(\"响应太短\".to_string());\n    }\n\n    // 解析ID\n    let id = u16::from_be_bytes([response[0], response[1]]);\n    if id != expected_id {\n        return Err(format!(\"ID不匹配：期望 {}, 收到 {}\", expected_id, id));\n    }\n\n    // 解析标志\n    let flags = u16::from_be_bytes([response[2], response[3]]);\n    let qr = (flags >> 15) & 0x1; // 响应位\n    let opcode = (flags >> 11) & 0xF; // 操作码\n    let rcode = flags & 0xF; // 响应码\n\n    if qr != 1 {\n        return Err(\"不是响应包\".to_string());\n    }\n\n    if opcode != 0 {\n        return Err(format!(\"未知操作码: {}\", opcode));\n    }\n\n    match rcode {\n        0 => {} // 没有错误\n        1 => return Err(\"DNS格式错误\".to_string()),\n        2 => return Err(\"DNS服务器失败\".to_string()),\n        3 => return Err(\"域名不存在\".to_string()),\n        4 => return Err(\"DNS服务器不支持请求类型\".to_string()),\n        5 => return Err(\"DNS查询被拒绝\".to_string()),\n        _ => return Err(format!(\"未知DNS错误码: {}\", rcode)),\n    }\n\n    // 获取问题和回答数量\n    let qdcount = u16::from_be_bytes([response[4], response[5]]);\n    let ancount = u16::from_be_bytes([response[6], response[7]]);\n\n    if ancount == 0 {\n        return Err(\"没有找到任何答案\".to_string());\n    }\n\n    // 跳过问题部分\n    let mut pos = 12;\n    for _ in 0..qdcount {\n        // 跳过域名\n        while pos < response.len() {\n            let len = response[pos] as usize;\n            if len == 0 {\n                pos += 1;\n                break;\n            }\n\n            // 检查是否是压缩指针\n            if (len & 0xC0) == 0xC0 {\n                pos += 2;\n                break;\n            }\n\n            pos += len + 1;\n        }\n\n        // 跳过类型和类\n        pos += 4;\n    }\n\n    // 解析回答部分\n    let mut ips = Vec::new();\n    for _ in 0..ancount {\n        // 跳过域名（可能是压缩指针）\n        if (response[pos] & 0xC0) == 0xC0 {\n            pos += 2;\n        } else {\n            while pos < response.len() {\n                let len = response[pos] as usize;\n                if len == 0 {\n                    pos += 1;\n                    break;\n                }\n                pos += len + 1;\n            }\n        }\n\n        // 读取记录类型\n        if pos + 10 > response.len() {\n            return Err(\"响应数据不完整\".to_string());\n        }\n\n        let rec_type = u16::from_be_bytes([response[pos], response[pos + 1]]);\n        let data_len = u16::from_be_bytes([response[pos + 8], response[pos + 9]]) as usize;\n\n        pos += 10;\n\n        // 检查是否是A记录\n        if rec_type == 1 && data_len == 4 && pos + 4 <= response.len() {\n            let ip = Ipv4Addr::new(\n                response[pos],\n                response[pos + 1],\n                response[pos + 2],\n                response[pos + 3],\n            );\n            ips.push(ip);\n        }\n\n        pos += data_len;\n    }\n\n    if ips.is_empty() {\n        Err(\"未找到IPv4地址\".to_string())\n    } else {\n        Ok(ips)\n    }\n}\n\npub fn resolve_domain(domain: &str) -> Result<Vec<Ipv4Addr>, String> {\n    // 创建UDP套接字\n    let socket = match UdpSocket::bind(\"0.0.0.0:0\") {\n        Ok(s) => s,\n        Err(e) => return Err(format!(\"绑定套接字失败: {}\", e)),\n    };\n\n    // 设置超时\n    if let Err(e) = socket.set_read_timeout(Some(Duration::from_secs(5))) {\n        return Err(format!(\"设置超时失败: {}\", e));\n    }\n\n    // 连接到DNS服务器\n    if let Err(e) = socket.connect(\"8.8.8.8:53\") {\n        return Err(format!(\"连接DNS服务器失败: {}\", e));\n    }\n\n    // 生成随机ID\n    let query_id = random_id();\n\n    // 构建DNS查询\n    let query = build_query(domain, query_id);\n\n    // 发送查询\n    if let Err(e) = socket.send(&query) {\n        return Err(format!(\"发送查询失败: {}\", e));\n    }\n\n    // 接收响应\n    let mut buf = [0u8; 512];\n    let size = match socket.recv(&mut buf) {\n        Ok(n) => n,\n        Err(e) => return Err(format!(\"接收响应失败: {}\", e)),\n    };\n\n    // 解析响应\n    parse_response(&buf[0..size], query_id)\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_reslove_domain() {\n        println!(\"baidu.com:{:#?}\", resolve_domain(\"baidu.com\").unwrap());\n        println!(\n            \"fengliuhuo.top: {:#?}\",\n            resolve_domain(\"barn.fengliuhuo.top\").unwrap()\n        );\n        println!(\"myhome.org: {:#?}\", resolve_domain(\"myhome.org\").unwrap());\n        println!(\n            \"fengliuhuo.top: {:#?}\",\n            resolve_domain(\"fengliuhuo.top\").unwrap()\n        );\n    }\n}\n\n\n```","source":"rust/DNS查询.md","raw":"---\ntitle: rust DNS 查询实现\ndate: 2024-12-17 21:38:28\ncategories:\n  - rust\ntags:\n  - DNS\n  - rust\n---\n\n# 代码\n```rust\nuse std::net::{Ipv4Addr, UdpSocket};\nuse std::time::Duration;\n\n// DNS 响应码\nenum ResponseCode {\n    NoError = 0,\n    FormatError = 1,\n    ServerFailure = 2,\n    NameEroor = 3,\n    NotImplemented = 4,\n    Refused = 5,\n}\n\n// 创建随机查询 ID\nfn random_id() -> u16 {\n    use std::time::{SystemTime, UNIX_EPOCH};\n    let now = SystemTime::now().duration_since(UNIX_EPOCH).unwrap();\n    (now.as_secs() as u16) ^ (now.subsec_nanos() as u16)\n}\n\n// 构建DNS查询包\nfn build_query(domain: &str, id: u16) -> Vec<u8> {\n    let mut query = Vec::new();\n\n    // 头部\n    query.extend_from_slice(&id.to_be_bytes()); // ID\n    query.extend_from_slice(&[0x01, 0x00]); // 标志：标准查询，递归期望\n    query.extend_from_slice(&[0x00, 0x01]); // 问题数量：1\n    query.extend_from_slice(&[0x00, 0x00]); // 回答数量：0\n    query.extend_from_slice(&[0x00, 0x00]); // 权威回答数量：0\n    query.extend_from_slice(&[0x00, 0x00]); // 附加记录数量：0\n\n    // 问题部分 - 域名\n    for part in domain.split('.') {\n        query.push(part.len() as u8);\n        query.extend_from_slice(part.as_bytes());\n    }\n    query.push(0x00); // 域名结束标记\n\n    // 问题部分 - 查询类型和类\n    query.extend_from_slice(&[0x00, 0x01]); // 类型：A记录\n    query.extend_from_slice(&[0x00, 0x01]); // 类：IN (Internet)\n\n    query\n}\n\n// 解析DNS响应\nfn parse_response(response: &[u8], expected_id: u16) -> Result<Vec<Ipv4Addr>, String> {\n    if response.len() < 12 {\n        return Err(\"响应太短\".to_string());\n    }\n\n    // 解析ID\n    let id = u16::from_be_bytes([response[0], response[1]]);\n    if id != expected_id {\n        return Err(format!(\"ID不匹配：期望 {}, 收到 {}\", expected_id, id));\n    }\n\n    // 解析标志\n    let flags = u16::from_be_bytes([response[2], response[3]]);\n    let qr = (flags >> 15) & 0x1; // 响应位\n    let opcode = (flags >> 11) & 0xF; // 操作码\n    let rcode = flags & 0xF; // 响应码\n\n    if qr != 1 {\n        return Err(\"不是响应包\".to_string());\n    }\n\n    if opcode != 0 {\n        return Err(format!(\"未知操作码: {}\", opcode));\n    }\n\n    match rcode {\n        0 => {} // 没有错误\n        1 => return Err(\"DNS格式错误\".to_string()),\n        2 => return Err(\"DNS服务器失败\".to_string()),\n        3 => return Err(\"域名不存在\".to_string()),\n        4 => return Err(\"DNS服务器不支持请求类型\".to_string()),\n        5 => return Err(\"DNS查询被拒绝\".to_string()),\n        _ => return Err(format!(\"未知DNS错误码: {}\", rcode)),\n    }\n\n    // 获取问题和回答数量\n    let qdcount = u16::from_be_bytes([response[4], response[5]]);\n    let ancount = u16::from_be_bytes([response[6], response[7]]);\n\n    if ancount == 0 {\n        return Err(\"没有找到任何答案\".to_string());\n    }\n\n    // 跳过问题部分\n    let mut pos = 12;\n    for _ in 0..qdcount {\n        // 跳过域名\n        while pos < response.len() {\n            let len = response[pos] as usize;\n            if len == 0 {\n                pos += 1;\n                break;\n            }\n\n            // 检查是否是压缩指针\n            if (len & 0xC0) == 0xC0 {\n                pos += 2;\n                break;\n            }\n\n            pos += len + 1;\n        }\n\n        // 跳过类型和类\n        pos += 4;\n    }\n\n    // 解析回答部分\n    let mut ips = Vec::new();\n    for _ in 0..ancount {\n        // 跳过域名（可能是压缩指针）\n        if (response[pos] & 0xC0) == 0xC0 {\n            pos += 2;\n        } else {\n            while pos < response.len() {\n                let len = response[pos] as usize;\n                if len == 0 {\n                    pos += 1;\n                    break;\n                }\n                pos += len + 1;\n            }\n        }\n\n        // 读取记录类型\n        if pos + 10 > response.len() {\n            return Err(\"响应数据不完整\".to_string());\n        }\n\n        let rec_type = u16::from_be_bytes([response[pos], response[pos + 1]]);\n        let data_len = u16::from_be_bytes([response[pos + 8], response[pos + 9]]) as usize;\n\n        pos += 10;\n\n        // 检查是否是A记录\n        if rec_type == 1 && data_len == 4 && pos + 4 <= response.len() {\n            let ip = Ipv4Addr::new(\n                response[pos],\n                response[pos + 1],\n                response[pos + 2],\n                response[pos + 3],\n            );\n            ips.push(ip);\n        }\n\n        pos += data_len;\n    }\n\n    if ips.is_empty() {\n        Err(\"未找到IPv4地址\".to_string())\n    } else {\n        Ok(ips)\n    }\n}\n\npub fn resolve_domain(domain: &str) -> Result<Vec<Ipv4Addr>, String> {\n    // 创建UDP套接字\n    let socket = match UdpSocket::bind(\"0.0.0.0:0\") {\n        Ok(s) => s,\n        Err(e) => return Err(format!(\"绑定套接字失败: {}\", e)),\n    };\n\n    // 设置超时\n    if let Err(e) = socket.set_read_timeout(Some(Duration::from_secs(5))) {\n        return Err(format!(\"设置超时失败: {}\", e));\n    }\n\n    // 连接到DNS服务器\n    if let Err(e) = socket.connect(\"8.8.8.8:53\") {\n        return Err(format!(\"连接DNS服务器失败: {}\", e));\n    }\n\n    // 生成随机ID\n    let query_id = random_id();\n\n    // 构建DNS查询\n    let query = build_query(domain, query_id);\n\n    // 发送查询\n    if let Err(e) = socket.send(&query) {\n        return Err(format!(\"发送查询失败: {}\", e));\n    }\n\n    // 接收响应\n    let mut buf = [0u8; 512];\n    let size = match socket.recv(&mut buf) {\n        Ok(n) => n,\n        Err(e) => return Err(format!(\"接收响应失败: {}\", e)),\n    };\n\n    // 解析响应\n    parse_response(&buf[0..size], query_id)\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_reslove_domain() {\n        println!(\"baidu.com:{:#?}\", resolve_domain(\"baidu.com\").unwrap());\n        println!(\n            \"fengliuhuo.top: {:#?}\",\n            resolve_domain(\"barn.fengliuhuo.top\").unwrap()\n        );\n        println!(\"myhome.org: {:#?}\", resolve_domain(\"myhome.org\").unwrap());\n        println!(\n            \"fengliuhuo.top: {:#?}\",\n            resolve_domain(\"fengliuhuo.top\").unwrap()\n        );\n    }\n}\n\n\n```","updated":"2025-03-30T13:25:43.711Z","path":"rust/DNS查询.html","comments":1,"layout":"page","_id":"cm8voguvq00006pxrggexcay1","content":"<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::net::&#123;Ipv4Addr, UdpSocket&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::time::Duration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DNS 响应码</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ResponseCode</span> &#123;</span><br><span class=\"line\">    NoError = <span class=\"number\">0</span>,</span><br><span class=\"line\">    FormatError = <span class=\"number\">1</span>,</span><br><span class=\"line\">    ServerFailure = <span class=\"number\">2</span>,</span><br><span class=\"line\">    NameEroor = <span class=\"number\">3</span>,</span><br><span class=\"line\">    NotImplemented = <span class=\"number\">4</span>,</span><br><span class=\"line\">    Refused = <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建随机查询 ID</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">random_id</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"type\">u16</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> std::time::&#123;SystemTime, UNIX_EPOCH&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">now</span> = SystemTime::<span class=\"title function_ invoke__\">now</span>().<span class=\"title function_ invoke__\">duration_since</span>(UNIX_EPOCH).<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">    (now.<span class=\"title function_ invoke__\">as_secs</span>() <span class=\"keyword\">as</span> <span class=\"type\">u16</span>) ^ (now.<span class=\"title function_ invoke__\">subsec_nanos</span>() <span class=\"keyword\">as</span> <span class=\"type\">u16</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构建DNS查询包</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">build_query</span>(domain: &amp;<span class=\"type\">str</span>, id: <span class=\"type\">u16</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Vec</span>&lt;<span class=\"type\">u8</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">query</span> = <span class=\"type\">Vec</span>::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 头部</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;id.<span class=\"title function_ invoke__\">to_be_bytes</span>()); <span class=\"comment\">// ID</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>]); <span class=\"comment\">// 标志：标准查询，递归期望</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x01</span>]); <span class=\"comment\">// 问题数量：1</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>]); <span class=\"comment\">// 回答数量：0</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>]); <span class=\"comment\">// 权威回答数量：0</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>]); <span class=\"comment\">// 附加记录数量：0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 问题部分 - 域名</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">part</span> <span class=\"keyword\">in</span> domain.<span class=\"title function_ invoke__\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>) &#123;</span><br><span class=\"line\">        query.<span class=\"title function_ invoke__\">push</span>(part.<span class=\"title function_ invoke__\">len</span>() <span class=\"keyword\">as</span> <span class=\"type\">u8</span>);</span><br><span class=\"line\">        query.<span class=\"title function_ invoke__\">extend_from_slice</span>(part.<span class=\"title function_ invoke__\">as_bytes</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">push</span>(<span class=\"number\">0x00</span>); <span class=\"comment\">// 域名结束标记</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 问题部分 - 查询类型和类</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x01</span>]); <span class=\"comment\">// 类型：A记录</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x01</span>]); <span class=\"comment\">// 类：IN (Internet)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    query</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析DNS响应</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">parse_response</span>(response: &amp;[<span class=\"type\">u8</span>], expected_id: <span class=\"type\">u16</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span>&lt;<span class=\"type\">Vec</span>&lt;Ipv4Addr&gt;, <span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> response.<span class=\"title function_ invoke__\">len</span>() &lt; <span class=\"number\">12</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;响应太短&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析ID</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">id</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[<span class=\"number\">0</span>], response[<span class=\"number\">1</span>]]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> id != expected_id &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;ID不匹配：期望 &#123;&#125;, 收到 &#123;&#125;&quot;</span>, expected_id, id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析标志</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">flags</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[<span class=\"number\">2</span>], response[<span class=\"number\">3</span>]]);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">qr</span> = (flags &gt;&gt; <span class=\"number\">15</span>) &amp; <span class=\"number\">0x1</span>; <span class=\"comment\">// 响应位</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">opcode</span> = (flags &gt;&gt; <span class=\"number\">11</span>) &amp; <span class=\"number\">0xF</span>; <span class=\"comment\">// 操作码</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">rcode</span> = flags &amp; <span class=\"number\">0xF</span>; <span class=\"comment\">// 响应码</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> qr != <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;不是响应包&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> opcode != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;未知操作码: &#123;&#125;&quot;</span>, opcode));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">match</span> rcode &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span> =&gt; &#123;&#125; <span class=\"comment\">// 没有错误</span></span><br><span class=\"line\">        <span class=\"number\">1</span> =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;DNS格式错误&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()),</span><br><span class=\"line\">        <span class=\"number\">2</span> =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;DNS服务器失败&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()),</span><br><span class=\"line\">        <span class=\"number\">3</span> =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;域名不存在&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()),</span><br><span class=\"line\">        <span class=\"number\">4</span> =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;DNS服务器不支持请求类型&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()),</span><br><span class=\"line\">        <span class=\"number\">5</span> =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;DNS查询被拒绝&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()),</span><br><span class=\"line\">        _ =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;未知DNS错误码: &#123;&#125;&quot;</span>, rcode)),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取问题和回答数量</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">qdcount</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[<span class=\"number\">4</span>], response[<span class=\"number\">5</span>]]);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ancount</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[<span class=\"number\">6</span>], response[<span class=\"number\">7</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ancount == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;没有找到任何答案&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 跳过问题部分</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">pos</span> = <span class=\"number\">12</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span>..qdcount &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳过域名</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> pos &lt; response.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = response[pos] <span class=\"keyword\">as</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                pos += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 检查是否是压缩指针</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (len &amp; <span class=\"number\">0xC0</span>) == <span class=\"number\">0xC0</span> &#123;</span><br><span class=\"line\">                pos += <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            pos += len + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 跳过类型和类</span></span><br><span class=\"line\">        pos += <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析回答部分</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">ips</span> = <span class=\"type\">Vec</span>::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span>..ancount &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳过域名（可能是压缩指针）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response[pos] &amp; <span class=\"number\">0xC0</span>) == <span class=\"number\">0xC0</span> &#123;</span><br><span class=\"line\">            pos += <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> pos &lt; response.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = response[pos] <span class=\"keyword\">as</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> len == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                    pos += <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pos += len + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取记录类型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> pos + <span class=\"number\">10</span> &gt; response.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;响应数据不完整&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">rec_type</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[pos], response[pos + <span class=\"number\">1</span>]]);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">data_len</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[pos + <span class=\"number\">8</span>], response[pos + <span class=\"number\">9</span>]]) <span class=\"keyword\">as</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        pos += <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查是否是A记录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> rec_type == <span class=\"number\">1</span> &amp;&amp; data_len == <span class=\"number\">4</span> &amp;&amp; pos + <span class=\"number\">4</span> &lt;= response.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">ip</span> = Ipv4Addr::<span class=\"title function_ invoke__\">new</span>(</span><br><span class=\"line\">                response[pos],</span><br><span class=\"line\">                response[pos + <span class=\"number\">1</span>],</span><br><span class=\"line\">                response[pos + <span class=\"number\">2</span>],</span><br><span class=\"line\">                response[pos + <span class=\"number\">3</span>],</span><br><span class=\"line\">            );</span><br><span class=\"line\">            ips.<span class=\"title function_ invoke__\">push</span>(ip);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        pos += data_len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ips.<span class=\"title function_ invoke__\">is_empty</span>() &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;未找到IPv4地址&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>())</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Ok</span>(ips)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">resolve_domain</span>(domain: &amp;<span class=\"type\">str</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span>&lt;<span class=\"type\">Vec</span>&lt;Ipv4Addr&gt;, <span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建UDP套接字</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">socket</span> = <span class=\"keyword\">match</span> UdpSocket::<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&quot;0.0.0.0:0&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Ok</span>(s) =&gt; s,</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Err</span>(e) =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;绑定套接字失败: &#123;&#125;&quot;</span>, e)),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置超时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Err</span>(e) = socket.<span class=\"title function_ invoke__\">set_read_timeout</span>(<span class=\"title function_ invoke__\">Some</span>(Duration::<span class=\"title function_ invoke__\">from_secs</span>(<span class=\"number\">5</span>))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;设置超时失败: &#123;&#125;&quot;</span>, e));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接到DNS服务器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Err</span>(e) = socket.<span class=\"title function_ invoke__\">connect</span>(<span class=\"string\">&quot;8.8.8.8:53&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;连接DNS服务器失败: &#123;&#125;&quot;</span>, e));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生成随机ID</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">query_id</span> = <span class=\"title function_ invoke__\">random_id</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建DNS查询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">query</span> = <span class=\"title function_ invoke__\">build_query</span>(domain, query_id);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送查询</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Err</span>(e) = socket.<span class=\"title function_ invoke__\">send</span>(&amp;query) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;发送查询失败: &#123;&#125;&quot;</span>, e));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接收响应</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">buf</span> = [<span class=\"number\">0u8</span>; <span class=\"number\">512</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">size</span> = <span class=\"keyword\">match</span> socket.<span class=\"title function_ invoke__\">recv</span>(&amp;<span class=\"keyword\">mut</span> buf) &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Ok</span>(n) =&gt; n,</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Err</span>(e) =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;接收响应失败: &#123;&#125;&quot;</span>, e)),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析响应</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">parse_response</span>(&amp;buf[<span class=\"number\">0</span>..size], query_id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[cfg(test)]</span></span><br><span class=\"line\"><span class=\"keyword\">mod</span> tests &#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> super::*;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[test]</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">test_reslove_domain</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;baidu.com:&#123;:#?&#125;&quot;</span>, <span class=\"title function_ invoke__\">resolve_domain</span>(<span class=\"string\">&quot;baidu.com&quot;</span>).<span class=\"title function_ invoke__\">unwrap</span>());</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;fengliuhuo.top: &#123;:#?&#125;&quot;</span>,</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">resolve_domain</span>(<span class=\"string\">&quot;barn.fengliuhuo.top&quot;</span>).<span class=\"title function_ invoke__\">unwrap</span>()</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;myhome.org: &#123;:#?&#125;&quot;</span>, <span class=\"title function_ invoke__\">resolve_domain</span>(<span class=\"string\">&quot;myhome.org&quot;</span>).<span class=\"title function_ invoke__\">unwrap</span>());</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;fengliuhuo.top: &#123;:#?&#125;&quot;</span>,</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">resolve_domain</span>(<span class=\"string\">&quot;fengliuhuo.top&quot;</span>).<span class=\"title function_ invoke__\">unwrap</span>()</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::net::&#123;Ipv4Addr, UdpSocket&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::time::Duration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DNS 响应码</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ResponseCode</span> &#123;</span><br><span class=\"line\">    NoError = <span class=\"number\">0</span>,</span><br><span class=\"line\">    FormatError = <span class=\"number\">1</span>,</span><br><span class=\"line\">    ServerFailure = <span class=\"number\">2</span>,</span><br><span class=\"line\">    NameEroor = <span class=\"number\">3</span>,</span><br><span class=\"line\">    NotImplemented = <span class=\"number\">4</span>,</span><br><span class=\"line\">    Refused = <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建随机查询 ID</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">random_id</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"type\">u16</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> std::time::&#123;SystemTime, UNIX_EPOCH&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">now</span> = SystemTime::<span class=\"title function_ invoke__\">now</span>().<span class=\"title function_ invoke__\">duration_since</span>(UNIX_EPOCH).<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">    (now.<span class=\"title function_ invoke__\">as_secs</span>() <span class=\"keyword\">as</span> <span class=\"type\">u16</span>) ^ (now.<span class=\"title function_ invoke__\">subsec_nanos</span>() <span class=\"keyword\">as</span> <span class=\"type\">u16</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构建DNS查询包</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">build_query</span>(domain: &amp;<span class=\"type\">str</span>, id: <span class=\"type\">u16</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Vec</span>&lt;<span class=\"type\">u8</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">query</span> = <span class=\"type\">Vec</span>::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 头部</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;id.<span class=\"title function_ invoke__\">to_be_bytes</span>()); <span class=\"comment\">// ID</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>]); <span class=\"comment\">// 标志：标准查询，递归期望</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x01</span>]); <span class=\"comment\">// 问题数量：1</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>]); <span class=\"comment\">// 回答数量：0</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>]); <span class=\"comment\">// 权威回答数量：0</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>]); <span class=\"comment\">// 附加记录数量：0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 问题部分 - 域名</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">part</span> <span class=\"keyword\">in</span> domain.<span class=\"title function_ invoke__\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>) &#123;</span><br><span class=\"line\">        query.<span class=\"title function_ invoke__\">push</span>(part.<span class=\"title function_ invoke__\">len</span>() <span class=\"keyword\">as</span> <span class=\"type\">u8</span>);</span><br><span class=\"line\">        query.<span class=\"title function_ invoke__\">extend_from_slice</span>(part.<span class=\"title function_ invoke__\">as_bytes</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">push</span>(<span class=\"number\">0x00</span>); <span class=\"comment\">// 域名结束标记</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 问题部分 - 查询类型和类</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x01</span>]); <span class=\"comment\">// 类型：A记录</span></span><br><span class=\"line\">    query.<span class=\"title function_ invoke__\">extend_from_slice</span>(&amp;[<span class=\"number\">0x00</span>, <span class=\"number\">0x01</span>]); <span class=\"comment\">// 类：IN (Internet)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    query</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析DNS响应</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">parse_response</span>(response: &amp;[<span class=\"type\">u8</span>], expected_id: <span class=\"type\">u16</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span>&lt;<span class=\"type\">Vec</span>&lt;Ipv4Addr&gt;, <span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> response.<span class=\"title function_ invoke__\">len</span>() &lt; <span class=\"number\">12</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;响应太短&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析ID</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">id</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[<span class=\"number\">0</span>], response[<span class=\"number\">1</span>]]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> id != expected_id &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;ID不匹配：期望 &#123;&#125;, 收到 &#123;&#125;&quot;</span>, expected_id, id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析标志</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">flags</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[<span class=\"number\">2</span>], response[<span class=\"number\">3</span>]]);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">qr</span> = (flags &gt;&gt; <span class=\"number\">15</span>) &amp; <span class=\"number\">0x1</span>; <span class=\"comment\">// 响应位</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">opcode</span> = (flags &gt;&gt; <span class=\"number\">11</span>) &amp; <span class=\"number\">0xF</span>; <span class=\"comment\">// 操作码</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">rcode</span> = flags &amp; <span class=\"number\">0xF</span>; <span class=\"comment\">// 响应码</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> qr != <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;不是响应包&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> opcode != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;未知操作码: &#123;&#125;&quot;</span>, opcode));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">match</span> rcode &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span> =&gt; &#123;&#125; <span class=\"comment\">// 没有错误</span></span><br><span class=\"line\">        <span class=\"number\">1</span> =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;DNS格式错误&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()),</span><br><span class=\"line\">        <span class=\"number\">2</span> =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;DNS服务器失败&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()),</span><br><span class=\"line\">        <span class=\"number\">3</span> =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;域名不存在&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()),</span><br><span class=\"line\">        <span class=\"number\">4</span> =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;DNS服务器不支持请求类型&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()),</span><br><span class=\"line\">        <span class=\"number\">5</span> =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;DNS查询被拒绝&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()),</span><br><span class=\"line\">        _ =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;未知DNS错误码: &#123;&#125;&quot;</span>, rcode)),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取问题和回答数量</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">qdcount</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[<span class=\"number\">4</span>], response[<span class=\"number\">5</span>]]);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ancount</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[<span class=\"number\">6</span>], response[<span class=\"number\">7</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ancount == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;没有找到任何答案&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 跳过问题部分</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">pos</span> = <span class=\"number\">12</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span>..qdcount &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳过域名</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> pos &lt; response.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = response[pos] <span class=\"keyword\">as</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                pos += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 检查是否是压缩指针</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (len &amp; <span class=\"number\">0xC0</span>) == <span class=\"number\">0xC0</span> &#123;</span><br><span class=\"line\">                pos += <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            pos += len + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 跳过类型和类</span></span><br><span class=\"line\">        pos += <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析回答部分</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">ips</span> = <span class=\"type\">Vec</span>::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span>..ancount &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳过域名（可能是压缩指针）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response[pos] &amp; <span class=\"number\">0xC0</span>) == <span class=\"number\">0xC0</span> &#123;</span><br><span class=\"line\">            pos += <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> pos &lt; response.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = response[pos] <span class=\"keyword\">as</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> len == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                    pos += <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pos += len + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取记录类型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> pos + <span class=\"number\">10</span> &gt; response.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;响应数据不完整&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">rec_type</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[pos], response[pos + <span class=\"number\">1</span>]]);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">data_len</span> = <span class=\"type\">u16</span>::<span class=\"title function_ invoke__\">from_be_bytes</span>([response[pos + <span class=\"number\">8</span>], response[pos + <span class=\"number\">9</span>]]) <span class=\"keyword\">as</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        pos += <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查是否是A记录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> rec_type == <span class=\"number\">1</span> &amp;&amp; data_len == <span class=\"number\">4</span> &amp;&amp; pos + <span class=\"number\">4</span> &lt;= response.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">ip</span> = Ipv4Addr::<span class=\"title function_ invoke__\">new</span>(</span><br><span class=\"line\">                response[pos],</span><br><span class=\"line\">                response[pos + <span class=\"number\">1</span>],</span><br><span class=\"line\">                response[pos + <span class=\"number\">2</span>],</span><br><span class=\"line\">                response[pos + <span class=\"number\">3</span>],</span><br><span class=\"line\">            );</span><br><span class=\"line\">            ips.<span class=\"title function_ invoke__\">push</span>(ip);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        pos += data_len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ips.<span class=\"title function_ invoke__\">is_empty</span>() &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;未找到IPv4地址&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>())</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Ok</span>(ips)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">resolve_domain</span>(domain: &amp;<span class=\"type\">str</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span>&lt;<span class=\"type\">Vec</span>&lt;Ipv4Addr&gt;, <span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建UDP套接字</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">socket</span> = <span class=\"keyword\">match</span> UdpSocket::<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&quot;0.0.0.0:0&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Ok</span>(s) =&gt; s,</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Err</span>(e) =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;绑定套接字失败: &#123;&#125;&quot;</span>, e)),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置超时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Err</span>(e) = socket.<span class=\"title function_ invoke__\">set_read_timeout</span>(<span class=\"title function_ invoke__\">Some</span>(Duration::<span class=\"title function_ invoke__\">from_secs</span>(<span class=\"number\">5</span>))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;设置超时失败: &#123;&#125;&quot;</span>, e));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接到DNS服务器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Err</span>(e) = socket.<span class=\"title function_ invoke__\">connect</span>(<span class=\"string\">&quot;8.8.8.8:53&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;连接DNS服务器失败: &#123;&#125;&quot;</span>, e));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生成随机ID</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">query_id</span> = <span class=\"title function_ invoke__\">random_id</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建DNS查询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">query</span> = <span class=\"title function_ invoke__\">build_query</span>(domain, query_id);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送查询</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Err</span>(e) = socket.<span class=\"title function_ invoke__\">send</span>(&amp;query) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;发送查询失败: &#123;&#125;&quot;</span>, e));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接收响应</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">buf</span> = [<span class=\"number\">0u8</span>; <span class=\"number\">512</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">size</span> = <span class=\"keyword\">match</span> socket.<span class=\"title function_ invoke__\">recv</span>(&amp;<span class=\"keyword\">mut</span> buf) &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Ok</span>(n) =&gt; n,</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Err</span>(e) =&gt; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Err</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;接收响应失败: &#123;&#125;&quot;</span>, e)),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析响应</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">parse_response</span>(&amp;buf[<span class=\"number\">0</span>..size], query_id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[cfg(test)]</span></span><br><span class=\"line\"><span class=\"keyword\">mod</span> tests &#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> super::*;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[test]</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">test_reslove_domain</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;baidu.com:&#123;:#?&#125;&quot;</span>, <span class=\"title function_ invoke__\">resolve_domain</span>(<span class=\"string\">&quot;baidu.com&quot;</span>).<span class=\"title function_ invoke__\">unwrap</span>());</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;fengliuhuo.top: &#123;:#?&#125;&quot;</span>,</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">resolve_domain</span>(<span class=\"string\">&quot;barn.fengliuhuo.top&quot;</span>).<span class=\"title function_ invoke__\">unwrap</span>()</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;myhome.org: &#123;:#?&#125;&quot;</span>, <span class=\"title function_ invoke__\">resolve_domain</span>(<span class=\"string\">&quot;myhome.org&quot;</span>).<span class=\"title function_ invoke__\">unwrap</span>());</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;fengliuhuo.top: &#123;:#?&#125;&quot;</span>,</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">resolve_domain</span>(<span class=\"string\">&quot;fengliuhuo.top&quot;</span>).<span class=\"title function_ invoke__\">unwrap</span>()</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"}],"Post":[{"_content":"","source":"_posts/go_chan.md","raw":"","slug":"go_chan","published":1,"date":"2024-12-22T12:13:07.448Z","updated":"2024-12-22T12:13:14.286Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm8vo7brt00032zxr3vi77nvy","content":"","excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-12-16T16:58:34.212Z","updated":"2024-12-16T16:58:34.212Z","comments":1,"layout":"post","photos":[],"_id":"cm8vo7bru00072zxr8d65edv6","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"python 安装","date":"2024-12-17T12:47:39.000Z","_content":"\n# Python\n\n如何安装一个python\n","source":"_posts/python.md","raw":"---\ntitle: python 安装\ndate: 2024-12-17 20:47:39\ntags:\n  - 安装\ncategories:\n  - Python\n---\n\n# Python\n\n如何安装一个python\n","slug":"python","published":1,"updated":"2024-12-17T13:25:53.869Z","comments":1,"layout":"post","photos":[],"_id":"cm8vo7brv00082zxrgpnzgp1l","content":"<h1 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h1><p>如何安装一个python</p>\n","excerpt":"","more":"<h1 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h1><p>如何安装一个python</p>\n"},{"title":"rust安装","date":"2024-12-17T13:38:28.000Z","_content":"\n# Rust 安装\n","source":"_posts/rust安装.md","raw":"---\ntitle: rust安装\ndate: 2024-12-17 21:38:28\ncategories:\n  - rust\ntags:\n  - 安装\n  - rust\n---\n\n# Rust 安装\n","slug":"rust安装","published":1,"updated":"2024-12-20T17:04:05.049Z","comments":1,"layout":"post","photos":[],"_id":"cm8vo7brw000h2zxrab20b67n","content":"<h1 id=\"Rust-安装\"><a href=\"#Rust-安装\" class=\"headerlink\" title=\"Rust 安装\"></a>Rust 安装</h1>","excerpt":"","more":"<h1 id=\"Rust-安装\"><a href=\"#Rust-安装\" class=\"headerlink\" title=\"Rust 安装\"></a>Rust 安装</h1>"}],"PostAsset":[],"PostCategory":[{"post_id":"cm8vo7brv00082zxrgpnzgp1l","category_id":"cm8vo7brv000a2zxr9dee9pb4","_id":"cm8vo7brw000f2zxrhb8d1e3h"},{"post_id":"cm8vo7brw000h2zxrab20b67n","category_id":"cm8vo7brt00042zxrcx7l1d7w","_id":"cm8vo7brw000k2zxrd72yhun0"}],"PostTag":[{"post_id":"cm8vo7brv00082zxrgpnzgp1l","tag_id":"cm8vo7brv000c2zxrc688930i","_id":"cm8vo7brw000g2zxrf4zwg16y"},{"post_id":"cm8vo7brw000h2zxrab20b67n","tag_id":"cm8vo7brv000c2zxrc688930i","_id":"cm8vo7brw000i2zxr6p1b74j1"},{"post_id":"cm8vo7brw000h2zxrab20b67n","tag_id":"cm8vo7brv00092zxr3513e00l","_id":"cm8vo7brw000j2zxr5d7qe7d5"}],"Tag":[{"name":"DNS","_id":"cm8vo7bru00052zxr2kcu2pq1"},{"name":"rust","_id":"cm8vo7brv00092zxr3513e00l"},{"name":"安装","_id":"cm8vo7brv000c2zxrc688930i"}]}}